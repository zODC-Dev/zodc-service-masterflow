//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var WorkflowConnections = newWorkflowConnectionsTable("public", "workflow_connections", "")

type workflowConnectionsTable struct {
	postgres.Table

	// Columns
	ID                 postgres.ColumnString
	CreatedAt          postgres.ColumnTimestamp
	UpdatedAt          postgres.ColumnTimestamp
	DeletedAt          postgres.ColumnTimestamp
	FromWorkflowNodeID postgres.ColumnString
	ToWorkflowNodeID   postgres.ColumnString
	Type               postgres.ColumnString
	WorkflowVersionID  postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type WorkflowConnectionsTable struct {
	workflowConnectionsTable

	EXCLUDED workflowConnectionsTable
}

// AS creates new WorkflowConnectionsTable with assigned alias
func (a WorkflowConnectionsTable) AS(alias string) *WorkflowConnectionsTable {
	return newWorkflowConnectionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WorkflowConnectionsTable with assigned schema name
func (a WorkflowConnectionsTable) FromSchema(schemaName string) *WorkflowConnectionsTable {
	return newWorkflowConnectionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WorkflowConnectionsTable with assigned table prefix
func (a WorkflowConnectionsTable) WithPrefix(prefix string) *WorkflowConnectionsTable {
	return newWorkflowConnectionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WorkflowConnectionsTable with assigned table suffix
func (a WorkflowConnectionsTable) WithSuffix(suffix string) *WorkflowConnectionsTable {
	return newWorkflowConnectionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWorkflowConnectionsTable(schemaName, tableName, alias string) *WorkflowConnectionsTable {
	return &WorkflowConnectionsTable{
		workflowConnectionsTable: newWorkflowConnectionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                 newWorkflowConnectionsTableImpl("", "excluded", ""),
	}
}

func newWorkflowConnectionsTableImpl(schemaName, tableName, alias string) workflowConnectionsTable {
	var (
		IDColumn                 = postgres.StringColumn("id")
		CreatedAtColumn          = postgres.TimestampColumn("created_at")
		UpdatedAtColumn          = postgres.TimestampColumn("updated_at")
		DeletedAtColumn          = postgres.TimestampColumn("deleted_at")
		FromWorkflowNodeIDColumn = postgres.StringColumn("from_workflow_node_id")
		ToWorkflowNodeIDColumn   = postgres.StringColumn("to_workflow_node_id")
		TypeColumn               = postgres.StringColumn("type")
		WorkflowVersionIDColumn  = postgres.IntegerColumn("workflow_version_id")
		allColumns               = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, FromWorkflowNodeIDColumn, ToWorkflowNodeIDColumn, TypeColumn, WorkflowVersionIDColumn}
		mutableColumns           = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, FromWorkflowNodeIDColumn, ToWorkflowNodeIDColumn, TypeColumn, WorkflowVersionIDColumn}
	)

	return workflowConnectionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		CreatedAt:          CreatedAtColumn,
		UpdatedAt:          UpdatedAtColumn,
		DeletedAt:          DeletedAtColumn,
		FromWorkflowNodeID: FromWorkflowNodeIDColumn,
		ToWorkflowNodeID:   ToWorkflowNodeIDColumn,
		Type:               TypeColumn,
		WorkflowVersionID:  WorkflowVersionIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
