//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FormTemplateFields = newFormTemplateFieldsTable("public", "form_template_fields", "")

type formTemplateFieldsTable struct {
	postgres.Table

	// Columns
	ID                    postgres.ColumnInteger
	CreatedAt             postgres.ColumnTimestamp
	UpdatedAt             postgres.ColumnTimestamp
	DeletedAt             postgres.ColumnTimestamp
	AdvancedOptions       postgres.ColumnString
	ColNum                postgres.ColumnInteger
	Required              postgres.ColumnBool
	Category              postgres.ColumnString
	Title                 postgres.ColumnString
	Icon                  postgres.ColumnString
	FieldID               postgres.ColumnString
	FieldType             postgres.ColumnString
	FieldName             postgres.ColumnString
	FormTemplateVersionID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FormTemplateFieldsTable struct {
	formTemplateFieldsTable

	EXCLUDED formTemplateFieldsTable
}

// AS creates new FormTemplateFieldsTable with assigned alias
func (a FormTemplateFieldsTable) AS(alias string) *FormTemplateFieldsTable {
	return newFormTemplateFieldsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FormTemplateFieldsTable with assigned schema name
func (a FormTemplateFieldsTable) FromSchema(schemaName string) *FormTemplateFieldsTable {
	return newFormTemplateFieldsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FormTemplateFieldsTable with assigned table prefix
func (a FormTemplateFieldsTable) WithPrefix(prefix string) *FormTemplateFieldsTable {
	return newFormTemplateFieldsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FormTemplateFieldsTable with assigned table suffix
func (a FormTemplateFieldsTable) WithSuffix(suffix string) *FormTemplateFieldsTable {
	return newFormTemplateFieldsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFormTemplateFieldsTable(schemaName, tableName, alias string) *FormTemplateFieldsTable {
	return &FormTemplateFieldsTable{
		formTemplateFieldsTable: newFormTemplateFieldsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newFormTemplateFieldsTableImpl("", "excluded", ""),
	}
}

func newFormTemplateFieldsTableImpl(schemaName, tableName, alias string) formTemplateFieldsTable {
	var (
		IDColumn                    = postgres.IntegerColumn("id")
		CreatedAtColumn             = postgres.TimestampColumn("created_at")
		UpdatedAtColumn             = postgres.TimestampColumn("updated_at")
		DeletedAtColumn             = postgres.TimestampColumn("deleted_at")
		AdvancedOptionsColumn       = postgres.StringColumn("advanced_options")
		ColNumColumn                = postgres.IntegerColumn("col_num")
		RequiredColumn              = postgres.BoolColumn("required")
		CategoryColumn              = postgres.StringColumn("category")
		TitleColumn                 = postgres.StringColumn("title")
		IconColumn                  = postgres.StringColumn("icon")
		FieldIDColumn               = postgres.StringColumn("field_id")
		FieldTypeColumn             = postgres.StringColumn("field_type")
		FieldNameColumn             = postgres.StringColumn("field_name")
		FormTemplateVersionIDColumn = postgres.IntegerColumn("form_template_version_id")
		allColumns                  = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, AdvancedOptionsColumn, ColNumColumn, RequiredColumn, CategoryColumn, TitleColumn, IconColumn, FieldIDColumn, FieldTypeColumn, FieldNameColumn, FormTemplateVersionIDColumn}
		mutableColumns              = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, AdvancedOptionsColumn, ColNumColumn, RequiredColumn, CategoryColumn, TitleColumn, IconColumn, FieldIDColumn, FieldTypeColumn, FieldNameColumn, FormTemplateVersionIDColumn}
	)

	return formTemplateFieldsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                    IDColumn,
		CreatedAt:             CreatedAtColumn,
		UpdatedAt:             UpdatedAtColumn,
		DeletedAt:             DeletedAtColumn,
		AdvancedOptions:       AdvancedOptionsColumn,
		ColNum:                ColNumColumn,
		Required:              RequiredColumn,
		Category:              CategoryColumn,
		Title:                 TitleColumn,
		Icon:                  IconColumn,
		FieldID:               FieldIDColumn,
		FieldType:             FieldTypeColumn,
		FieldName:             FieldNameColumn,
		FormTemplateVersionID: FormTemplateVersionIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
