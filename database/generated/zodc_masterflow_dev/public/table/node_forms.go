//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var NodeForms = newNodeFormsTable("public", "node_forms", "")

type nodeFormsTable struct {
	postgres.Table

	// Columns
	ID                       postgres.ColumnInteger
	CreatedAt                postgres.ColumnTimestamp
	UpdatedAt                postgres.ColumnTimestamp
	DeletedAt                postgres.ColumnTimestamp
	Level                    postgres.ColumnInteger
	Permission               postgres.ColumnString
	Key                      postgres.ColumnString
	OptionKey                postgres.ColumnString
	FromUserID               postgres.ColumnInteger
	FromFormAttachedPosition postgres.ColumnInteger
	IsOriginal               postgres.ColumnBool
	IsApproved               postgres.ColumnBool
	IsRejected               postgres.ColumnBool
	IsSubmitted              postgres.ColumnBool
	SubmittedAt              postgres.ColumnTimestamp
	SubmittedByUserID        postgres.ColumnInteger
	LastUpdateUserID         postgres.ColumnInteger
	DataID                   postgres.ColumnString
	TemplateID               postgres.ColumnInteger
	TemplateVersionID        postgres.ColumnInteger
	NodeID                   postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type NodeFormsTable struct {
	nodeFormsTable

	EXCLUDED nodeFormsTable
}

// AS creates new NodeFormsTable with assigned alias
func (a NodeFormsTable) AS(alias string) *NodeFormsTable {
	return newNodeFormsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NodeFormsTable with assigned schema name
func (a NodeFormsTable) FromSchema(schemaName string) *NodeFormsTable {
	return newNodeFormsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NodeFormsTable with assigned table prefix
func (a NodeFormsTable) WithPrefix(prefix string) *NodeFormsTable {
	return newNodeFormsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NodeFormsTable with assigned table suffix
func (a NodeFormsTable) WithSuffix(suffix string) *NodeFormsTable {
	return newNodeFormsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNodeFormsTable(schemaName, tableName, alias string) *NodeFormsTable {
	return &NodeFormsTable{
		nodeFormsTable: newNodeFormsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newNodeFormsTableImpl("", "excluded", ""),
	}
}

func newNodeFormsTableImpl(schemaName, tableName, alias string) nodeFormsTable {
	var (
		IDColumn                       = postgres.IntegerColumn("id")
		CreatedAtColumn                = postgres.TimestampColumn("created_at")
		UpdatedAtColumn                = postgres.TimestampColumn("updated_at")
		DeletedAtColumn                = postgres.TimestampColumn("deleted_at")
		LevelColumn                    = postgres.IntegerColumn("level")
		PermissionColumn               = postgres.StringColumn("permission")
		KeyColumn                      = postgres.StringColumn("key")
		OptionKeyColumn                = postgres.StringColumn("option_key")
		FromUserIDColumn               = postgres.IntegerColumn("from_user_id")
		FromFormAttachedPositionColumn = postgres.IntegerColumn("from_form_attached_position")
		IsOriginalColumn               = postgres.BoolColumn("is_original")
		IsApprovedColumn               = postgres.BoolColumn("is_approved")
		IsRejectedColumn               = postgres.BoolColumn("is_rejected")
		IsSubmittedColumn              = postgres.BoolColumn("is_submitted")
		SubmittedAtColumn              = postgres.TimestampColumn("submitted_at")
		SubmittedByUserIDColumn        = postgres.IntegerColumn("submitted_by_user_id")
		LastUpdateUserIDColumn         = postgres.IntegerColumn("last_update_user_id")
		DataIDColumn                   = postgres.StringColumn("data_id")
		TemplateIDColumn               = postgres.IntegerColumn("template_id")
		TemplateVersionIDColumn        = postgres.IntegerColumn("template_version_id")
		NodeIDColumn                   = postgres.StringColumn("node_id")
		allColumns                     = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, LevelColumn, PermissionColumn, KeyColumn, OptionKeyColumn, FromUserIDColumn, FromFormAttachedPositionColumn, IsOriginalColumn, IsApprovedColumn, IsRejectedColumn, IsSubmittedColumn, SubmittedAtColumn, SubmittedByUserIDColumn, LastUpdateUserIDColumn, DataIDColumn, TemplateIDColumn, TemplateVersionIDColumn, NodeIDColumn}
		mutableColumns                 = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, LevelColumn, PermissionColumn, KeyColumn, OptionKeyColumn, FromUserIDColumn, FromFormAttachedPositionColumn, IsOriginalColumn, IsApprovedColumn, IsRejectedColumn, IsSubmittedColumn, SubmittedAtColumn, SubmittedByUserIDColumn, LastUpdateUserIDColumn, DataIDColumn, TemplateIDColumn, TemplateVersionIDColumn, NodeIDColumn}
	)

	return nodeFormsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                       IDColumn,
		CreatedAt:                CreatedAtColumn,
		UpdatedAt:                UpdatedAtColumn,
		DeletedAt:                DeletedAtColumn,
		Level:                    LevelColumn,
		Permission:               PermissionColumn,
		Key:                      KeyColumn,
		OptionKey:                OptionKeyColumn,
		FromUserID:               FromUserIDColumn,
		FromFormAttachedPosition: FromFormAttachedPositionColumn,
		IsOriginal:               IsOriginalColumn,
		IsApproved:               IsApprovedColumn,
		IsRejected:               IsRejectedColumn,
		IsSubmitted:              IsSubmittedColumn,
		SubmittedAt:              SubmittedAtColumn,
		SubmittedByUserID:        SubmittedByUserIDColumn,
		LastUpdateUserID:         LastUpdateUserIDColumn,
		DataID:                   DataIDColumn,
		TemplateID:               TemplateIDColumn,
		TemplateVersionID:        TemplateVersionIDColumn,
		NodeID:                   NodeIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
