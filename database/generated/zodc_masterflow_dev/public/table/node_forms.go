//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var NodeForms = newNodeFormsTable("public", "node_forms", "")

type nodeFormsTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	CreatedAt  postgres.ColumnTimestamp
	UpdatedAt  postgres.ColumnTimestamp
	DeletedAt  postgres.ColumnTimestamp
	Permission postgres.ColumnString
	NodeID     postgres.ColumnString
	FormDataID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type NodeFormsTable struct {
	nodeFormsTable

	EXCLUDED nodeFormsTable
}

// AS creates new NodeFormsTable with assigned alias
func (a NodeFormsTable) AS(alias string) *NodeFormsTable {
	return newNodeFormsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NodeFormsTable with assigned schema name
func (a NodeFormsTable) FromSchema(schemaName string) *NodeFormsTable {
	return newNodeFormsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NodeFormsTable with assigned table prefix
func (a NodeFormsTable) WithPrefix(prefix string) *NodeFormsTable {
	return newNodeFormsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NodeFormsTable with assigned table suffix
func (a NodeFormsTable) WithSuffix(suffix string) *NodeFormsTable {
	return newNodeFormsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNodeFormsTable(schemaName, tableName, alias string) *NodeFormsTable {
	return &NodeFormsTable{
		nodeFormsTable: newNodeFormsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newNodeFormsTableImpl("", "excluded", ""),
	}
}

func newNodeFormsTableImpl(schemaName, tableName, alias string) nodeFormsTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		CreatedAtColumn  = postgres.TimestampColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampColumn("updated_at")
		DeletedAtColumn  = postgres.TimestampColumn("deleted_at")
		PermissionColumn = postgres.StringColumn("permission")
		NodeIDColumn     = postgres.StringColumn("node_id")
		FormDataIDColumn = postgres.IntegerColumn("form_data_id")
		allColumns       = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, PermissionColumn, NodeIDColumn, FormDataIDColumn}
		mutableColumns   = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, PermissionColumn, NodeIDColumn, FormDataIDColumn}
	)

	return nodeFormsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		DeletedAt:  DeletedAtColumn,
		Permission: PermissionColumn,
		NodeID:     NodeIDColumn,
		FormDataID: FormDataIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
