//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Requests = newRequestsTable("public", "requests", "")

type requestsTable struct {
	postgres.Table

	// Columns
	ID                postgres.ColumnInteger
	CreatedAt         postgres.ColumnTimestamp
	UpdatedAt         postgres.ColumnTimestamp
	DeletedAt         postgres.ColumnTimestamp
	LastUpdateUserID  postgres.ColumnInteger
	Status            postgres.ColumnString
	Title             postgres.ColumnString
	IsTemplate        postgres.ColumnBool
	WorkflowVersionID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RequestsTable struct {
	requestsTable

	EXCLUDED requestsTable
}

// AS creates new RequestsTable with assigned alias
func (a RequestsTable) AS(alias string) *RequestsTable {
	return newRequestsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RequestsTable with assigned schema name
func (a RequestsTable) FromSchema(schemaName string) *RequestsTable {
	return newRequestsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RequestsTable with assigned table prefix
func (a RequestsTable) WithPrefix(prefix string) *RequestsTable {
	return newRequestsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RequestsTable with assigned table suffix
func (a RequestsTable) WithSuffix(suffix string) *RequestsTable {
	return newRequestsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRequestsTable(schemaName, tableName, alias string) *RequestsTable {
	return &RequestsTable{
		requestsTable: newRequestsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newRequestsTableImpl("", "excluded", ""),
	}
}

func newRequestsTableImpl(schemaName, tableName, alias string) requestsTable {
	var (
		IDColumn                = postgres.IntegerColumn("id")
		CreatedAtColumn         = postgres.TimestampColumn("created_at")
		UpdatedAtColumn         = postgres.TimestampColumn("updated_at")
		DeletedAtColumn         = postgres.TimestampColumn("deleted_at")
		LastUpdateUserIDColumn  = postgres.IntegerColumn("last_update_user_id")
		StatusColumn            = postgres.StringColumn("status")
		TitleColumn             = postgres.StringColumn("title")
		IsTemplateColumn        = postgres.BoolColumn("is_template")
		WorkflowVersionIDColumn = postgres.IntegerColumn("workflow_version_id")
		allColumns              = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, LastUpdateUserIDColumn, StatusColumn, TitleColumn, IsTemplateColumn, WorkflowVersionIDColumn}
		mutableColumns          = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, LastUpdateUserIDColumn, StatusColumn, TitleColumn, IsTemplateColumn, WorkflowVersionIDColumn}
	)

	return requestsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		CreatedAt:         CreatedAtColumn,
		UpdatedAt:         UpdatedAtColumn,
		DeletedAt:         DeletedAtColumn,
		LastUpdateUserID:  LastUpdateUserIDColumn,
		Status:            StatusColumn,
		Title:             TitleColumn,
		IsTemplate:        IsTemplateColumn,
		WorkflowVersionID: WorkflowVersionIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
