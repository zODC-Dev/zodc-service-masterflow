//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Histories = newHistoriesTable("public", "histories", "")

type historiesTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	CreatedAt  postgres.ColumnTimestamp
	UpdatedAt  postgres.ColumnTimestamp
	DeletedAt  postgres.ColumnTimestamp
	TypeAction postgres.ColumnString
	UserID     postgres.ColumnInteger
	RequestID  postgres.ColumnInteger
	NodeID     postgres.ColumnString
	FromValue  postgres.ColumnString
	ToValue    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type HistoriesTable struct {
	historiesTable

	EXCLUDED historiesTable
}

// AS creates new HistoriesTable with assigned alias
func (a HistoriesTable) AS(alias string) *HistoriesTable {
	return newHistoriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new HistoriesTable with assigned schema name
func (a HistoriesTable) FromSchema(schemaName string) *HistoriesTable {
	return newHistoriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new HistoriesTable with assigned table prefix
func (a HistoriesTable) WithPrefix(prefix string) *HistoriesTable {
	return newHistoriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new HistoriesTable with assigned table suffix
func (a HistoriesTable) WithSuffix(suffix string) *HistoriesTable {
	return newHistoriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newHistoriesTable(schemaName, tableName, alias string) *HistoriesTable {
	return &HistoriesTable{
		historiesTable: newHistoriesTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newHistoriesTableImpl("", "excluded", ""),
	}
}

func newHistoriesTableImpl(schemaName, tableName, alias string) historiesTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		CreatedAtColumn  = postgres.TimestampColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampColumn("updated_at")
		DeletedAtColumn  = postgres.TimestampColumn("deleted_at")
		TypeActionColumn = postgres.StringColumn("type_action")
		UserIDColumn     = postgres.IntegerColumn("user_id")
		RequestIDColumn  = postgres.IntegerColumn("request_id")
		NodeIDColumn     = postgres.StringColumn("node_id")
		FromValueColumn  = postgres.StringColumn("from_value")
		ToValueColumn    = postgres.StringColumn("to_value")
		allColumns       = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, TypeActionColumn, UserIDColumn, RequestIDColumn, NodeIDColumn, FromValueColumn, ToValueColumn}
		mutableColumns   = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, TypeActionColumn, UserIDColumn, RequestIDColumn, NodeIDColumn, FromValueColumn, ToValueColumn}
	)

	return historiesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		DeletedAt:  DeletedAtColumn,
		TypeAction: TypeActionColumn,
		UserID:     UserIDColumn,
		RequestID:  RequestIDColumn,
		NodeID:     NodeIDColumn,
		FromValue:  FromValueColumn,
		ToValue:    ToValueColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
