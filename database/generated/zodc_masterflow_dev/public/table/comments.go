//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Comments = newCommentsTable("public", "comments", "")

type commentsTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestamp
	UpdatedAt postgres.ColumnTimestamp
	DeletedAt postgres.ColumnTimestamp
	UserID    postgres.ColumnInteger
	Content   postgres.ColumnString
	NodeID    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CommentsTable struct {
	commentsTable

	EXCLUDED commentsTable
}

// AS creates new CommentsTable with assigned alias
func (a CommentsTable) AS(alias string) *CommentsTable {
	return newCommentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CommentsTable with assigned schema name
func (a CommentsTable) FromSchema(schemaName string) *CommentsTable {
	return newCommentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CommentsTable with assigned table prefix
func (a CommentsTable) WithPrefix(prefix string) *CommentsTable {
	return newCommentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CommentsTable with assigned table suffix
func (a CommentsTable) WithSuffix(suffix string) *CommentsTable {
	return newCommentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCommentsTable(schemaName, tableName, alias string) *CommentsTable {
	return &CommentsTable{
		commentsTable: newCommentsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newCommentsTableImpl("", "excluded", ""),
	}
}

func newCommentsTableImpl(schemaName, tableName, alias string) commentsTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		UpdatedAtColumn = postgres.TimestampColumn("updated_at")
		DeletedAtColumn = postgres.TimestampColumn("deleted_at")
		UserIDColumn    = postgres.IntegerColumn("user_id")
		ContentColumn   = postgres.StringColumn("content")
		NodeIDColumn    = postgres.StringColumn("node_id")
		allColumns      = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, UserIDColumn, ContentColumn, NodeIDColumn}
		mutableColumns  = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, UserIDColumn, ContentColumn, NodeIDColumn}
	)

	return commentsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,
		DeletedAt: DeletedAtColumn,
		UserID:    UserIDColumn,
		Content:   ContentColumn,
		NodeID:    NodeIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
