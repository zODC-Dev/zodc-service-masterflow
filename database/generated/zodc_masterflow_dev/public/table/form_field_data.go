//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FormFieldData = newFormFieldDataTable("public", "form_field_data", "")

type formFieldDataTable struct {
	postgres.Table

	// Columns
	ID                  postgres.ColumnInteger
	CreatedAt           postgres.ColumnTimestamp
	UpdatedAt           postgres.ColumnTimestamp
	DeletedAt           postgres.ColumnTimestamp
	Value               postgres.ColumnString
	FormDataID          postgres.ColumnInteger
	FormTemplateFieldID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FormFieldDataTable struct {
	formFieldDataTable

	EXCLUDED formFieldDataTable
}

// AS creates new FormFieldDataTable with assigned alias
func (a FormFieldDataTable) AS(alias string) *FormFieldDataTable {
	return newFormFieldDataTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FormFieldDataTable with assigned schema name
func (a FormFieldDataTable) FromSchema(schemaName string) *FormFieldDataTable {
	return newFormFieldDataTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FormFieldDataTable with assigned table prefix
func (a FormFieldDataTable) WithPrefix(prefix string) *FormFieldDataTable {
	return newFormFieldDataTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FormFieldDataTable with assigned table suffix
func (a FormFieldDataTable) WithSuffix(suffix string) *FormFieldDataTable {
	return newFormFieldDataTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFormFieldDataTable(schemaName, tableName, alias string) *FormFieldDataTable {
	return &FormFieldDataTable{
		formFieldDataTable: newFormFieldDataTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newFormFieldDataTableImpl("", "excluded", ""),
	}
}

func newFormFieldDataTableImpl(schemaName, tableName, alias string) formFieldDataTable {
	var (
		IDColumn                  = postgres.IntegerColumn("id")
		CreatedAtColumn           = postgres.TimestampColumn("created_at")
		UpdatedAtColumn           = postgres.TimestampColumn("updated_at")
		DeletedAtColumn           = postgres.TimestampColumn("deleted_at")
		ValueColumn               = postgres.StringColumn("value")
		FormDataIDColumn          = postgres.IntegerColumn("form_data_id")
		FormTemplateFieldIDColumn = postgres.IntegerColumn("form_template_field_id")
		allColumns                = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, ValueColumn, FormDataIDColumn, FormTemplateFieldIDColumn}
		mutableColumns            = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, ValueColumn, FormDataIDColumn, FormTemplateFieldIDColumn}
	)

	return formFieldDataTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		CreatedAt:           CreatedAtColumn,
		UpdatedAt:           UpdatedAtColumn,
		DeletedAt:           DeletedAtColumn,
		Value:               ValueColumn,
		FormDataID:          FormDataIDColumn,
		FormTemplateFieldID: FormTemplateFieldIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
