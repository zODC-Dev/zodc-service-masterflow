//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var WorkflowVersions = newWorkflowVersionsTable("public", "workflow_versions", "")

type workflowVersionsTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnInteger
	CreatedAt      postgres.ColumnTimestamp
	UpdatedAt      postgres.ColumnTimestamp
	DeletedAt      postgres.ColumnTimestamp
	Version        postgres.ColumnInteger
	HasSubWorkflow postgres.ColumnBool
	WorkflowID     postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type WorkflowVersionsTable struct {
	workflowVersionsTable

	EXCLUDED workflowVersionsTable
}

// AS creates new WorkflowVersionsTable with assigned alias
func (a WorkflowVersionsTable) AS(alias string) *WorkflowVersionsTable {
	return newWorkflowVersionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WorkflowVersionsTable with assigned schema name
func (a WorkflowVersionsTable) FromSchema(schemaName string) *WorkflowVersionsTable {
	return newWorkflowVersionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WorkflowVersionsTable with assigned table prefix
func (a WorkflowVersionsTable) WithPrefix(prefix string) *WorkflowVersionsTable {
	return newWorkflowVersionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WorkflowVersionsTable with assigned table suffix
func (a WorkflowVersionsTable) WithSuffix(suffix string) *WorkflowVersionsTable {
	return newWorkflowVersionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWorkflowVersionsTable(schemaName, tableName, alias string) *WorkflowVersionsTable {
	return &WorkflowVersionsTable{
		workflowVersionsTable: newWorkflowVersionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newWorkflowVersionsTableImpl("", "excluded", ""),
	}
}

func newWorkflowVersionsTableImpl(schemaName, tableName, alias string) workflowVersionsTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		CreatedAtColumn      = postgres.TimestampColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampColumn("updated_at")
		DeletedAtColumn      = postgres.TimestampColumn("deleted_at")
		VersionColumn        = postgres.IntegerColumn("version")
		HasSubWorkflowColumn = postgres.BoolColumn("has_sub_workflow")
		WorkflowIDColumn     = postgres.IntegerColumn("workflow_id")
		allColumns           = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, VersionColumn, HasSubWorkflowColumn, WorkflowIDColumn}
		mutableColumns       = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, VersionColumn, HasSubWorkflowColumn, WorkflowIDColumn}
	)

	return workflowVersionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		DeletedAt:      DeletedAtColumn,
		Version:        VersionColumn,
		HasSubWorkflow: HasSubWorkflowColumn,
		WorkflowID:     WorkflowIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
