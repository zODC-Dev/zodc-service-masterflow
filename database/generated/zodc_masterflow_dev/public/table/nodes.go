//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Nodes = newNodesTable("public", "nodes", "")

type nodesTable struct {
	postgres.Table

	// Columns
	ID                        postgres.ColumnString
	CreatedAt                 postgres.ColumnTimestamp
	UpdatedAt                 postgres.ColumnTimestamp
	DeletedAt                 postgres.ColumnTimestamp
	X                         postgres.ColumnFloat
	Y                         postgres.ColumnFloat
	Width                     postgres.ColumnFloat
	Height                    postgres.ColumnFloat
	Level                     postgres.ColumnInteger
	Key                       postgres.ColumnInteger
	JiraKey                   postgres.ColumnString
	Title                     postgres.ColumnString
	AssigneeID                postgres.ColumnInteger
	SubRequestID              postgres.ColumnInteger
	Type                      postgres.ColumnString
	Status                    postgres.ColumnString
	IsCurrent                 postgres.ColumnBool
	JiraLinkURL               postgres.ColumnString
	EstimatePoint             postgres.ColumnFloat
	PlannedStartTime          postgres.ColumnTimestamp
	PlannedEndTime            postgres.ColumnTimestamp
	ActualStartTime           postgres.ColumnTimestamp
	ActualEndTime             postgres.ColumnTimestamp
	Body                      postgres.ColumnString
	Subject                   postgres.ColumnString
	CcEmails                  postgres.ColumnString
	ToEmails                  postgres.ColumnString
	BccEmails                 postgres.ColumnString
	IsApproved                postgres.ColumnBool
	IsRejected                postgres.ColumnBool
	EndType                   postgres.ColumnString
	TaskAssignedRequester     postgres.ColumnBool
	TaskAssignedAssignee      postgres.ColumnBool
	TaskAssignedParticipants  postgres.ColumnBool
	TaskStartedRequester      postgres.ColumnBool
	TaskStartedAssignee       postgres.ColumnBool
	TaskStartedParticipants   postgres.ColumnBool
	TaskCompletedRequester    postgres.ColumnBool
	TaskCompletedAssignee     postgres.ColumnBool
	TaskCompletedParticipants postgres.ColumnBool
	ParentID                  postgres.ColumnString
	RequestID                 postgres.ColumnInteger
	FormTemplateID            postgres.ColumnInteger
	FormDataID                postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type NodesTable struct {
	nodesTable

	EXCLUDED nodesTable
}

// AS creates new NodesTable with assigned alias
func (a NodesTable) AS(alias string) *NodesTable {
	return newNodesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NodesTable with assigned schema name
func (a NodesTable) FromSchema(schemaName string) *NodesTable {
	return newNodesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NodesTable with assigned table prefix
func (a NodesTable) WithPrefix(prefix string) *NodesTable {
	return newNodesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NodesTable with assigned table suffix
func (a NodesTable) WithSuffix(suffix string) *NodesTable {
	return newNodesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNodesTable(schemaName, tableName, alias string) *NodesTable {
	return &NodesTable{
		nodesTable: newNodesTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newNodesTableImpl("", "excluded", ""),
	}
}

func newNodesTableImpl(schemaName, tableName, alias string) nodesTable {
	var (
		IDColumn                        = postgres.StringColumn("id")
		CreatedAtColumn                 = postgres.TimestampColumn("created_at")
		UpdatedAtColumn                 = postgres.TimestampColumn("updated_at")
		DeletedAtColumn                 = postgres.TimestampColumn("deleted_at")
		XColumn                         = postgres.FloatColumn("x")
		YColumn                         = postgres.FloatColumn("y")
		WidthColumn                     = postgres.FloatColumn("width")
		HeightColumn                    = postgres.FloatColumn("height")
		LevelColumn                     = postgres.IntegerColumn("level")
		KeyColumn                       = postgres.IntegerColumn("key")
		JiraKeyColumn                   = postgres.StringColumn("jira_key")
		TitleColumn                     = postgres.StringColumn("title")
		AssigneeIDColumn                = postgres.IntegerColumn("assignee_id")
		SubRequestIDColumn              = postgres.IntegerColumn("sub_request_id")
		TypeColumn                      = postgres.StringColumn("type")
		StatusColumn                    = postgres.StringColumn("status")
		IsCurrentColumn                 = postgres.BoolColumn("is_current")
		JiraLinkURLColumn               = postgres.StringColumn("jira_link_url")
		EstimatePointColumn             = postgres.FloatColumn("estimate_point")
		PlannedStartTimeColumn          = postgres.TimestampColumn("planned_start_time")
		PlannedEndTimeColumn            = postgres.TimestampColumn("planned_end_time")
		ActualStartTimeColumn           = postgres.TimestampColumn("actual_start_time")
		ActualEndTimeColumn             = postgres.TimestampColumn("actual_end_time")
		BodyColumn                      = postgres.StringColumn("body")
		SubjectColumn                   = postgres.StringColumn("subject")
		CcEmailsColumn                  = postgres.StringColumn("cc_emails")
		ToEmailsColumn                  = postgres.StringColumn("to_emails")
		BccEmailsColumn                 = postgres.StringColumn("bcc_emails")
		IsApprovedColumn                = postgres.BoolColumn("is_approved")
		IsRejectedColumn                = postgres.BoolColumn("is_rejected")
		EndTypeColumn                   = postgres.StringColumn("end_type")
		TaskAssignedRequesterColumn     = postgres.BoolColumn("task_assigned_requester")
		TaskAssignedAssigneeColumn      = postgres.BoolColumn("task_assigned_assignee")
		TaskAssignedParticipantsColumn  = postgres.BoolColumn("task_assigned_participants")
		TaskStartedRequesterColumn      = postgres.BoolColumn("task_started_requester")
		TaskStartedAssigneeColumn       = postgres.BoolColumn("task_started_assignee")
		TaskStartedParticipantsColumn   = postgres.BoolColumn("task_started_participants")
		TaskCompletedRequesterColumn    = postgres.BoolColumn("task_completed_requester")
		TaskCompletedAssigneeColumn     = postgres.BoolColumn("task_completed_assignee")
		TaskCompletedParticipantsColumn = postgres.BoolColumn("task_completed_participants")
		ParentIDColumn                  = postgres.StringColumn("parent_id")
		RequestIDColumn                 = postgres.IntegerColumn("request_id")
		FormTemplateIDColumn            = postgres.IntegerColumn("form_template_id")
		FormDataIDColumn                = postgres.StringColumn("form_data_id")
		allColumns                      = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, XColumn, YColumn, WidthColumn, HeightColumn, LevelColumn, KeyColumn, JiraKeyColumn, TitleColumn, AssigneeIDColumn, SubRequestIDColumn, TypeColumn, StatusColumn, IsCurrentColumn, JiraLinkURLColumn, EstimatePointColumn, PlannedStartTimeColumn, PlannedEndTimeColumn, ActualStartTimeColumn, ActualEndTimeColumn, BodyColumn, SubjectColumn, CcEmailsColumn, ToEmailsColumn, BccEmailsColumn, IsApprovedColumn, IsRejectedColumn, EndTypeColumn, TaskAssignedRequesterColumn, TaskAssignedAssigneeColumn, TaskAssignedParticipantsColumn, TaskStartedRequesterColumn, TaskStartedAssigneeColumn, TaskStartedParticipantsColumn, TaskCompletedRequesterColumn, TaskCompletedAssigneeColumn, TaskCompletedParticipantsColumn, ParentIDColumn, RequestIDColumn, FormTemplateIDColumn, FormDataIDColumn}
		mutableColumns                  = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, XColumn, YColumn, WidthColumn, HeightColumn, LevelColumn, KeyColumn, JiraKeyColumn, TitleColumn, AssigneeIDColumn, SubRequestIDColumn, TypeColumn, StatusColumn, IsCurrentColumn, JiraLinkURLColumn, EstimatePointColumn, PlannedStartTimeColumn, PlannedEndTimeColumn, ActualStartTimeColumn, ActualEndTimeColumn, BodyColumn, SubjectColumn, CcEmailsColumn, ToEmailsColumn, BccEmailsColumn, IsApprovedColumn, IsRejectedColumn, EndTypeColumn, TaskAssignedRequesterColumn, TaskAssignedAssigneeColumn, TaskAssignedParticipantsColumn, TaskStartedRequesterColumn, TaskStartedAssigneeColumn, TaskStartedParticipantsColumn, TaskCompletedRequesterColumn, TaskCompletedAssigneeColumn, TaskCompletedParticipantsColumn, ParentIDColumn, RequestIDColumn, FormTemplateIDColumn, FormDataIDColumn}
	)

	return nodesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                        IDColumn,
		CreatedAt:                 CreatedAtColumn,
		UpdatedAt:                 UpdatedAtColumn,
		DeletedAt:                 DeletedAtColumn,
		X:                         XColumn,
		Y:                         YColumn,
		Width:                     WidthColumn,
		Height:                    HeightColumn,
		Level:                     LevelColumn,
		Key:                       KeyColumn,
		JiraKey:                   JiraKeyColumn,
		Title:                     TitleColumn,
		AssigneeID:                AssigneeIDColumn,
		SubRequestID:              SubRequestIDColumn,
		Type:                      TypeColumn,
		Status:                    StatusColumn,
		IsCurrent:                 IsCurrentColumn,
		JiraLinkURL:               JiraLinkURLColumn,
		EstimatePoint:             EstimatePointColumn,
		PlannedStartTime:          PlannedStartTimeColumn,
		PlannedEndTime:            PlannedEndTimeColumn,
		ActualStartTime:           ActualStartTimeColumn,
		ActualEndTime:             ActualEndTimeColumn,
		Body:                      BodyColumn,
		Subject:                   SubjectColumn,
		CcEmails:                  CcEmailsColumn,
		ToEmails:                  ToEmailsColumn,
		BccEmails:                 BccEmailsColumn,
		IsApproved:                IsApprovedColumn,
		IsRejected:                IsRejectedColumn,
		EndType:                   EndTypeColumn,
		TaskAssignedRequester:     TaskAssignedRequesterColumn,
		TaskAssignedAssignee:      TaskAssignedAssigneeColumn,
		TaskAssignedParticipants:  TaskAssignedParticipantsColumn,
		TaskStartedRequester:      TaskStartedRequesterColumn,
		TaskStartedAssignee:       TaskStartedAssigneeColumn,
		TaskStartedParticipants:   TaskStartedParticipantsColumn,
		TaskCompletedRequester:    TaskCompletedRequesterColumn,
		TaskCompletedAssignee:     TaskCompletedAssigneeColumn,
		TaskCompletedParticipants: TaskCompletedParticipantsColumn,
		ParentID:                  ParentIDColumn,
		RequestID:                 RequestIDColumn,
		FormTemplateID:            FormTemplateIDColumn,
		FormDataID:                FormDataIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
