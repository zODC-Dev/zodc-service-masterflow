//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Nodes = newNodesTable("public", "nodes", "")

type nodesTable struct {
	postgres.Table

	// Columns
	ID               postgres.ColumnString
	CreatedAt        postgres.ColumnTimestamp
	UpdatedAt        postgres.ColumnTimestamp
	DeletedAt        postgres.ColumnTimestamp
	X                postgres.ColumnFloat
	Y                postgres.ColumnFloat
	Width            postgres.ColumnFloat
	Height           postgres.ColumnFloat
	Title            postgres.ColumnString
	AssigneeID       postgres.ColumnInteger
	DueIn            postgres.ColumnInteger
	EndType          postgres.ColumnString
	SubRequestID     postgres.ColumnInteger
	Type             postgres.ColumnString
	Status           postgres.ColumnString
	EstimatePoint    postgres.ColumnInteger
	PlanStartTime    postgres.ColumnTimestamp
	PlanFinishTime   postgres.ColumnTimestamp
	ActualStartTime  postgres.ColumnTimestamp
	ActualFinishTime postgres.ColumnTimestamp
	ParentID         postgres.ColumnString
	RequestID        postgres.ColumnInteger
	FormTemplateID   postgres.ColumnInteger
	FormDataID       postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type NodesTable struct {
	nodesTable

	EXCLUDED nodesTable
}

// AS creates new NodesTable with assigned alias
func (a NodesTable) AS(alias string) *NodesTable {
	return newNodesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NodesTable with assigned schema name
func (a NodesTable) FromSchema(schemaName string) *NodesTable {
	return newNodesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NodesTable with assigned table prefix
func (a NodesTable) WithPrefix(prefix string) *NodesTable {
	return newNodesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NodesTable with assigned table suffix
func (a NodesTable) WithSuffix(suffix string) *NodesTable {
	return newNodesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNodesTable(schemaName, tableName, alias string) *NodesTable {
	return &NodesTable{
		nodesTable: newNodesTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newNodesTableImpl("", "excluded", ""),
	}
}

func newNodesTableImpl(schemaName, tableName, alias string) nodesTable {
	var (
		IDColumn               = postgres.StringColumn("id")
		CreatedAtColumn        = postgres.TimestampColumn("created_at")
		UpdatedAtColumn        = postgres.TimestampColumn("updated_at")
		DeletedAtColumn        = postgres.TimestampColumn("deleted_at")
		XColumn                = postgres.FloatColumn("x")
		YColumn                = postgres.FloatColumn("y")
		WidthColumn            = postgres.FloatColumn("width")
		HeightColumn           = postgres.FloatColumn("height")
		TitleColumn            = postgres.StringColumn("title")
		AssigneeIDColumn       = postgres.IntegerColumn("assignee_id")
		DueInColumn            = postgres.IntegerColumn("due_in")
		EndTypeColumn          = postgres.StringColumn("end_type")
		SubRequestIDColumn     = postgres.IntegerColumn("sub_request_id")
		TypeColumn             = postgres.StringColumn("type")
		StatusColumn           = postgres.StringColumn("status")
		EstimatePointColumn    = postgres.IntegerColumn("estimate_point")
		PlanStartTimeColumn    = postgres.TimestampColumn("plan_start_time")
		PlanFinishTimeColumn   = postgres.TimestampColumn("plan_finish_time")
		ActualStartTimeColumn  = postgres.TimestampColumn("actual_start_time")
		ActualFinishTimeColumn = postgres.TimestampColumn("actual_finish_time")
		ParentIDColumn         = postgres.StringColumn("parent_id")
		RequestIDColumn        = postgres.IntegerColumn("request_id")
		FormTemplateIDColumn   = postgres.IntegerColumn("form_template_id")
		FormDataIDColumn       = postgres.IntegerColumn("form_data_id")
		allColumns             = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, XColumn, YColumn, WidthColumn, HeightColumn, TitleColumn, AssigneeIDColumn, DueInColumn, EndTypeColumn, SubRequestIDColumn, TypeColumn, StatusColumn, EstimatePointColumn, PlanStartTimeColumn, PlanFinishTimeColumn, ActualStartTimeColumn, ActualFinishTimeColumn, ParentIDColumn, RequestIDColumn, FormTemplateIDColumn, FormDataIDColumn}
		mutableColumns         = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, XColumn, YColumn, WidthColumn, HeightColumn, TitleColumn, AssigneeIDColumn, DueInColumn, EndTypeColumn, SubRequestIDColumn, TypeColumn, StatusColumn, EstimatePointColumn, PlanStartTimeColumn, PlanFinishTimeColumn, ActualStartTimeColumn, ActualFinishTimeColumn, ParentIDColumn, RequestIDColumn, FormTemplateIDColumn, FormDataIDColumn}
	)

	return nodesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		CreatedAt:        CreatedAtColumn,
		UpdatedAt:        UpdatedAtColumn,
		DeletedAt:        DeletedAtColumn,
		X:                XColumn,
		Y:                YColumn,
		Width:            WidthColumn,
		Height:           HeightColumn,
		Title:            TitleColumn,
		AssigneeID:       AssigneeIDColumn,
		DueIn:            DueInColumn,
		EndType:          EndTypeColumn,
		SubRequestID:     SubRequestIDColumn,
		Type:             TypeColumn,
		Status:           StatusColumn,
		EstimatePoint:    EstimatePointColumn,
		PlanStartTime:    PlanStartTimeColumn,
		PlanFinishTime:   PlanFinishTimeColumn,
		ActualStartTime:  ActualStartTimeColumn,
		ActualFinishTime: ActualFinishTimeColumn,
		ParentID:         ParentIDColumn,
		RequestID:        RequestIDColumn,
		FormTemplateID:   FormTemplateIDColumn,
		FormDataID:       FormDataIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
