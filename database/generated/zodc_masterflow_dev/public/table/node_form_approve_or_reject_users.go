//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var NodeFormApproveOrRejectUsers = newNodeFormApproveOrRejectUsersTable("public", "node_form_approve_or_reject_users", "")

type nodeFormApproveOrRejectUsersTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	CreatedAt  postgres.ColumnTimestamp
	UpdatedAt  postgres.ColumnTimestamp
	DeletedAt  postgres.ColumnTimestamp
	IsApproved postgres.ColumnBool
	UserID     postgres.ColumnInteger
	NodeFormID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type NodeFormApproveOrRejectUsersTable struct {
	nodeFormApproveOrRejectUsersTable

	EXCLUDED nodeFormApproveOrRejectUsersTable
}

// AS creates new NodeFormApproveOrRejectUsersTable with assigned alias
func (a NodeFormApproveOrRejectUsersTable) AS(alias string) *NodeFormApproveOrRejectUsersTable {
	return newNodeFormApproveOrRejectUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NodeFormApproveOrRejectUsersTable with assigned schema name
func (a NodeFormApproveOrRejectUsersTable) FromSchema(schemaName string) *NodeFormApproveOrRejectUsersTable {
	return newNodeFormApproveOrRejectUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NodeFormApproveOrRejectUsersTable with assigned table prefix
func (a NodeFormApproveOrRejectUsersTable) WithPrefix(prefix string) *NodeFormApproveOrRejectUsersTable {
	return newNodeFormApproveOrRejectUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NodeFormApproveOrRejectUsersTable with assigned table suffix
func (a NodeFormApproveOrRejectUsersTable) WithSuffix(suffix string) *NodeFormApproveOrRejectUsersTable {
	return newNodeFormApproveOrRejectUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNodeFormApproveOrRejectUsersTable(schemaName, tableName, alias string) *NodeFormApproveOrRejectUsersTable {
	return &NodeFormApproveOrRejectUsersTable{
		nodeFormApproveOrRejectUsersTable: newNodeFormApproveOrRejectUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:                          newNodeFormApproveOrRejectUsersTableImpl("", "excluded", ""),
	}
}

func newNodeFormApproveOrRejectUsersTableImpl(schemaName, tableName, alias string) nodeFormApproveOrRejectUsersTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		CreatedAtColumn  = postgres.TimestampColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampColumn("updated_at")
		DeletedAtColumn  = postgres.TimestampColumn("deleted_at")
		IsApprovedColumn = postgres.BoolColumn("is_approved")
		UserIDColumn     = postgres.IntegerColumn("user_id")
		NodeFormIDColumn = postgres.IntegerColumn("node_form_id")
		allColumns       = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, IsApprovedColumn, UserIDColumn, NodeFormIDColumn}
		mutableColumns   = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, IsApprovedColumn, UserIDColumn, NodeFormIDColumn}
	)

	return nodeFormApproveOrRejectUsersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		DeletedAt:  DeletedAtColumn,
		IsApproved: IsApprovedColumn,
		UserID:     UserIDColumn,
		NodeFormID: NodeFormIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
