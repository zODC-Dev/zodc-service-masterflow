//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var RequestNodes = newRequestNodesTable("public", "request_nodes", "")

type requestNodesTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	CreatedAt  postgres.ColumnTimestamp
	UpdatedAt  postgres.ColumnTimestamp
	DeletedAt  postgres.ColumnTimestamp
	Status     postgres.ColumnString
	RequestID  postgres.ColumnInteger
	FormDataID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RequestNodesTable struct {
	requestNodesTable

	EXCLUDED requestNodesTable
}

// AS creates new RequestNodesTable with assigned alias
func (a RequestNodesTable) AS(alias string) *RequestNodesTable {
	return newRequestNodesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RequestNodesTable with assigned schema name
func (a RequestNodesTable) FromSchema(schemaName string) *RequestNodesTable {
	return newRequestNodesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RequestNodesTable with assigned table prefix
func (a RequestNodesTable) WithPrefix(prefix string) *RequestNodesTable {
	return newRequestNodesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RequestNodesTable with assigned table suffix
func (a RequestNodesTable) WithSuffix(suffix string) *RequestNodesTable {
	return newRequestNodesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRequestNodesTable(schemaName, tableName, alias string) *RequestNodesTable {
	return &RequestNodesTable{
		requestNodesTable: newRequestNodesTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newRequestNodesTableImpl("", "excluded", ""),
	}
}

func newRequestNodesTableImpl(schemaName, tableName, alias string) requestNodesTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		CreatedAtColumn  = postgres.TimestampColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampColumn("updated_at")
		DeletedAtColumn  = postgres.TimestampColumn("deleted_at")
		StatusColumn     = postgres.StringColumn("status")
		RequestIDColumn  = postgres.IntegerColumn("request_id")
		FormDataIDColumn = postgres.IntegerColumn("form_data_id")
		allColumns       = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, StatusColumn, RequestIDColumn, FormDataIDColumn}
		mutableColumns   = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, StatusColumn, RequestIDColumn, FormDataIDColumn}
	)

	return requestNodesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		DeletedAt:  DeletedAtColumn,
		Status:     StatusColumn,
		RequestID:  RequestIDColumn,
		FormDataID: FormDataIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
