//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var NodeConnections = newNodeConnectionsTable("public", "node_connections", "")

type nodeConnectionsTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnString
	CreatedAt  postgres.ColumnTimestamp
	UpdatedAt  postgres.ColumnTimestamp
	DeletedAt  postgres.ColumnTimestamp
	Type       postgres.ColumnString
	FromNodeID postgres.ColumnString
	ToNodeID   postgres.ColumnString
	WorkflowID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type NodeConnectionsTable struct {
	nodeConnectionsTable

	EXCLUDED nodeConnectionsTable
}

// AS creates new NodeConnectionsTable with assigned alias
func (a NodeConnectionsTable) AS(alias string) *NodeConnectionsTable {
	return newNodeConnectionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NodeConnectionsTable with assigned schema name
func (a NodeConnectionsTable) FromSchema(schemaName string) *NodeConnectionsTable {
	return newNodeConnectionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NodeConnectionsTable with assigned table prefix
func (a NodeConnectionsTable) WithPrefix(prefix string) *NodeConnectionsTable {
	return newNodeConnectionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NodeConnectionsTable with assigned table suffix
func (a NodeConnectionsTable) WithSuffix(suffix string) *NodeConnectionsTable {
	return newNodeConnectionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNodeConnectionsTable(schemaName, tableName, alias string) *NodeConnectionsTable {
	return &NodeConnectionsTable{
		nodeConnectionsTable: newNodeConnectionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newNodeConnectionsTableImpl("", "excluded", ""),
	}
}

func newNodeConnectionsTableImpl(schemaName, tableName, alias string) nodeConnectionsTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		CreatedAtColumn  = postgres.TimestampColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampColumn("updated_at")
		DeletedAtColumn  = postgres.TimestampColumn("deleted_at")
		TypeColumn       = postgres.StringColumn("type")
		FromNodeIDColumn = postgres.StringColumn("from_node_id")
		ToNodeIDColumn   = postgres.StringColumn("to_node_id")
		WorkflowIDColumn = postgres.IntegerColumn("workflow_id")
		allColumns       = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, TypeColumn, FromNodeIDColumn, ToNodeIDColumn, WorkflowIDColumn}
		mutableColumns   = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, TypeColumn, FromNodeIDColumn, ToNodeIDColumn, WorkflowIDColumn}
	)

	return nodeConnectionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		DeletedAt:  DeletedAtColumn,
		Type:       TypeColumn,
		FromNodeID: FromNodeIDColumn,
		ToNodeID:   ToNodeIDColumn,
		WorkflowID: WorkflowIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
