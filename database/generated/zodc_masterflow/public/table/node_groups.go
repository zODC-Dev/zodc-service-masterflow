//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var NodeGroups = newNodeGroupsTable("public", "node_groups", "")

type nodeGroupsTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnString
	CreatedAt  postgres.ColumnTimestamp
	UpdatedAt  postgres.ColumnTimestamp
	DeletedAt  postgres.ColumnTimestamp
	Title      postgres.ColumnString
	X          postgres.ColumnFloat
	Y          postgres.ColumnFloat
	Width      postgres.ColumnFloat
	Height     postgres.ColumnFloat
	TicketID   postgres.ColumnString
	Type       postgres.ColumnString
	WorkflowID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type NodeGroupsTable struct {
	nodeGroupsTable

	EXCLUDED nodeGroupsTable
}

// AS creates new NodeGroupsTable with assigned alias
func (a NodeGroupsTable) AS(alias string) *NodeGroupsTable {
	return newNodeGroupsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NodeGroupsTable with assigned schema name
func (a NodeGroupsTable) FromSchema(schemaName string) *NodeGroupsTable {
	return newNodeGroupsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NodeGroupsTable with assigned table prefix
func (a NodeGroupsTable) WithPrefix(prefix string) *NodeGroupsTable {
	return newNodeGroupsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NodeGroupsTable with assigned table suffix
func (a NodeGroupsTable) WithSuffix(suffix string) *NodeGroupsTable {
	return newNodeGroupsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNodeGroupsTable(schemaName, tableName, alias string) *NodeGroupsTable {
	return &NodeGroupsTable{
		nodeGroupsTable: newNodeGroupsTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newNodeGroupsTableImpl("", "excluded", ""),
	}
}

func newNodeGroupsTableImpl(schemaName, tableName, alias string) nodeGroupsTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		CreatedAtColumn  = postgres.TimestampColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampColumn("updated_at")
		DeletedAtColumn  = postgres.TimestampColumn("deleted_at")
		TitleColumn      = postgres.StringColumn("title")
		XColumn          = postgres.FloatColumn("x")
		YColumn          = postgres.FloatColumn("y")
		WidthColumn      = postgres.FloatColumn("width")
		HeightColumn     = postgres.FloatColumn("height")
		TicketIDColumn   = postgres.StringColumn("ticket_id")
		TypeColumn       = postgres.StringColumn("type")
		WorkflowIDColumn = postgres.IntegerColumn("workflow_id")
		allColumns       = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, TitleColumn, XColumn, YColumn, WidthColumn, HeightColumn, TicketIDColumn, TypeColumn, WorkflowIDColumn}
		mutableColumns   = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, TitleColumn, XColumn, YColumn, WidthColumn, HeightColumn, TicketIDColumn, TypeColumn, WorkflowIDColumn}
	)

	return nodeGroupsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		DeletedAt:  DeletedAtColumn,
		Title:      TitleColumn,
		X:          XColumn,
		Y:          YColumn,
		Width:      WidthColumn,
		Height:     HeightColumn,
		TicketID:   TicketIDColumn,
		Type:       TypeColumn,
		WorkflowID: WorkflowIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
