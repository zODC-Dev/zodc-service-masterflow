//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FormFields = newFormFieldsTable("public", "form_fields", "")

type formFieldsTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnInteger
	CreatedAt       postgres.ColumnTimestamp
	UpdatedAt       postgres.ColumnTimestamp
	DeletedAt       postgres.ColumnTimestamp
	FieldID         postgres.ColumnString
	Icon            postgres.ColumnString
	Title           postgres.ColumnString
	Category        postgres.ColumnString
	FieldName       postgres.ColumnString
	FieldType       postgres.ColumnString
	Required        postgres.ColumnBool
	AdvancedOptions postgres.ColumnString
	ColNum          postgres.ColumnInteger
	FormID          postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FormFieldsTable struct {
	formFieldsTable

	EXCLUDED formFieldsTable
}

// AS creates new FormFieldsTable with assigned alias
func (a FormFieldsTable) AS(alias string) *FormFieldsTable {
	return newFormFieldsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FormFieldsTable with assigned schema name
func (a FormFieldsTable) FromSchema(schemaName string) *FormFieldsTable {
	return newFormFieldsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FormFieldsTable with assigned table prefix
func (a FormFieldsTable) WithPrefix(prefix string) *FormFieldsTable {
	return newFormFieldsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FormFieldsTable with assigned table suffix
func (a FormFieldsTable) WithSuffix(suffix string) *FormFieldsTable {
	return newFormFieldsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFormFieldsTable(schemaName, tableName, alias string) *FormFieldsTable {
	return &FormFieldsTable{
		formFieldsTable: newFormFieldsTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newFormFieldsTableImpl("", "excluded", ""),
	}
}

func newFormFieldsTableImpl(schemaName, tableName, alias string) formFieldsTable {
	var (
		IDColumn              = postgres.IntegerColumn("id")
		CreatedAtColumn       = postgres.TimestampColumn("created_at")
		UpdatedAtColumn       = postgres.TimestampColumn("updated_at")
		DeletedAtColumn       = postgres.TimestampColumn("deleted_at")
		FieldIDColumn         = postgres.StringColumn("field_id")
		IconColumn            = postgres.StringColumn("icon")
		TitleColumn           = postgres.StringColumn("title")
		CategoryColumn        = postgres.StringColumn("category")
		FieldNameColumn       = postgres.StringColumn("field_name")
		FieldTypeColumn       = postgres.StringColumn("field_type")
		RequiredColumn        = postgres.BoolColumn("required")
		AdvancedOptionsColumn = postgres.StringColumn("advanced_options")
		ColNumColumn          = postgres.IntegerColumn("col_num")
		FormIDColumn          = postgres.IntegerColumn("form_id")
		allColumns            = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, FieldIDColumn, IconColumn, TitleColumn, CategoryColumn, FieldNameColumn, FieldTypeColumn, RequiredColumn, AdvancedOptionsColumn, ColNumColumn, FormIDColumn}
		mutableColumns        = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, FieldIDColumn, IconColumn, TitleColumn, CategoryColumn, FieldNameColumn, FieldTypeColumn, RequiredColumn, AdvancedOptionsColumn, ColNumColumn, FormIDColumn}
	)

	return formFieldsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		CreatedAt:       CreatedAtColumn,
		UpdatedAt:       UpdatedAtColumn,
		DeletedAt:       DeletedAtColumn,
		FieldID:         FieldIDColumn,
		Icon:            IconColumn,
		Title:           TitleColumn,
		Category:        CategoryColumn,
		FieldName:       FieldNameColumn,
		FieldType:       FieldTypeColumn,
		Required:        RequiredColumn,
		AdvancedOptions: AdvancedOptionsColumn,
		ColNum:          ColNumColumn,
		FormID:          FormIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
