//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Workflows = newWorkflowsTable("public", "workflows", "")

type workflowsTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	CreatedAt   postgres.ColumnTimestamp
	UpdatedAt   postgres.ColumnTimestamp
	DeletedAt   postgres.ColumnTimestamp
	Title       postgres.ColumnString
	Type        postgres.ColumnString
	CategoryID  postgres.ColumnInteger
	Version     postgres.ColumnInteger
	Description postgres.ColumnString
	Decoration  postgres.ColumnString
	FormID      postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type WorkflowsTable struct {
	workflowsTable

	EXCLUDED workflowsTable
}

// AS creates new WorkflowsTable with assigned alias
func (a WorkflowsTable) AS(alias string) *WorkflowsTable {
	return newWorkflowsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WorkflowsTable with assigned schema name
func (a WorkflowsTable) FromSchema(schemaName string) *WorkflowsTable {
	return newWorkflowsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WorkflowsTable with assigned table prefix
func (a WorkflowsTable) WithPrefix(prefix string) *WorkflowsTable {
	return newWorkflowsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WorkflowsTable with assigned table suffix
func (a WorkflowsTable) WithSuffix(suffix string) *WorkflowsTable {
	return newWorkflowsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWorkflowsTable(schemaName, tableName, alias string) *WorkflowsTable {
	return &WorkflowsTable{
		workflowsTable: newWorkflowsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newWorkflowsTableImpl("", "excluded", ""),
	}
}

func newWorkflowsTableImpl(schemaName, tableName, alias string) workflowsTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		CreatedAtColumn   = postgres.TimestampColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampColumn("updated_at")
		DeletedAtColumn   = postgres.TimestampColumn("deleted_at")
		TitleColumn       = postgres.StringColumn("title")
		TypeColumn        = postgres.StringColumn("type")
		CategoryIDColumn  = postgres.IntegerColumn("category_id")
		VersionColumn     = postgres.IntegerColumn("version")
		DescriptionColumn = postgres.StringColumn("description")
		DecorationColumn  = postgres.StringColumn("decoration")
		FormIDColumn      = postgres.IntegerColumn("form_id")
		allColumns        = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, TitleColumn, TypeColumn, CategoryIDColumn, VersionColumn, DescriptionColumn, DecorationColumn, FormIDColumn}
		mutableColumns    = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, TitleColumn, TypeColumn, CategoryIDColumn, VersionColumn, DescriptionColumn, DecorationColumn, FormIDColumn}
	)

	return workflowsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		DeletedAt:   DeletedAtColumn,
		Title:       TitleColumn,
		Type:        TypeColumn,
		CategoryID:  CategoryIDColumn,
		Version:     VersionColumn,
		Description: DescriptionColumn,
		Decoration:  DecorationColumn,
		FormID:      FormIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
