//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var WorkflowNodes = newWorkflowNodesTable("public", "workflow_nodes", "")

type workflowNodesTable struct {
	postgres.Table

	// Columns
	ID                   postgres.ColumnString
	CreatedAt            postgres.ColumnTimestamp
	UpdatedAt            postgres.ColumnTimestamp
	DeletedAt            postgres.ColumnTimestamp
	X                    postgres.ColumnFloat
	Y                    postgres.ColumnFloat
	Width                postgres.ColumnFloat
	Height               postgres.ColumnFloat
	Title                postgres.ColumnString
	AssigneeID           postgres.ColumnInteger
	DueIn                postgres.ColumnInteger
	EndType              postgres.ColumnString
	SubWorkflowVersionID postgres.ColumnInteger
	Type                 postgres.ColumnString
	ParentID             postgres.ColumnString
	WorkflowVersionID    postgres.ColumnInteger
	FormTemplateID       postgres.ColumnInteger
	FormDataID           postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type WorkflowNodesTable struct {
	workflowNodesTable

	EXCLUDED workflowNodesTable
}

// AS creates new WorkflowNodesTable with assigned alias
func (a WorkflowNodesTable) AS(alias string) *WorkflowNodesTable {
	return newWorkflowNodesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WorkflowNodesTable with assigned schema name
func (a WorkflowNodesTable) FromSchema(schemaName string) *WorkflowNodesTable {
	return newWorkflowNodesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WorkflowNodesTable with assigned table prefix
func (a WorkflowNodesTable) WithPrefix(prefix string) *WorkflowNodesTable {
	return newWorkflowNodesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WorkflowNodesTable with assigned table suffix
func (a WorkflowNodesTable) WithSuffix(suffix string) *WorkflowNodesTable {
	return newWorkflowNodesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWorkflowNodesTable(schemaName, tableName, alias string) *WorkflowNodesTable {
	return &WorkflowNodesTable{
		workflowNodesTable: newWorkflowNodesTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newWorkflowNodesTableImpl("", "excluded", ""),
	}
}

func newWorkflowNodesTableImpl(schemaName, tableName, alias string) workflowNodesTable {
	var (
		IDColumn                   = postgres.StringColumn("id")
		CreatedAtColumn            = postgres.TimestampColumn("created_at")
		UpdatedAtColumn            = postgres.TimestampColumn("updated_at")
		DeletedAtColumn            = postgres.TimestampColumn("deleted_at")
		XColumn                    = postgres.FloatColumn("x")
		YColumn                    = postgres.FloatColumn("y")
		WidthColumn                = postgres.FloatColumn("width")
		HeightColumn               = postgres.FloatColumn("height")
		TitleColumn                = postgres.StringColumn("title")
		AssigneeIDColumn           = postgres.IntegerColumn("assignee_id")
		DueInColumn                = postgres.IntegerColumn("due_in")
		EndTypeColumn              = postgres.StringColumn("end_type")
		SubWorkflowVersionIDColumn = postgres.IntegerColumn("sub_workflow_version_id")
		TypeColumn                 = postgres.StringColumn("type")
		ParentIDColumn             = postgres.StringColumn("parent_id")
		WorkflowVersionIDColumn    = postgres.IntegerColumn("workflow_version_id")
		FormTemplateIDColumn       = postgres.IntegerColumn("form_template_id")
		FormDataIDColumn           = postgres.IntegerColumn("form_data_id")
		allColumns                 = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, XColumn, YColumn, WidthColumn, HeightColumn, TitleColumn, AssigneeIDColumn, DueInColumn, EndTypeColumn, SubWorkflowVersionIDColumn, TypeColumn, ParentIDColumn, WorkflowVersionIDColumn, FormTemplateIDColumn, FormDataIDColumn}
		mutableColumns             = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, XColumn, YColumn, WidthColumn, HeightColumn, TitleColumn, AssigneeIDColumn, DueInColumn, EndTypeColumn, SubWorkflowVersionIDColumn, TypeColumn, ParentIDColumn, WorkflowVersionIDColumn, FormTemplateIDColumn, FormDataIDColumn}
	)

	return workflowNodesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		CreatedAt:            CreatedAtColumn,
		UpdatedAt:            UpdatedAtColumn,
		DeletedAt:            DeletedAtColumn,
		X:                    XColumn,
		Y:                    YColumn,
		Width:                WidthColumn,
		Height:               HeightColumn,
		Title:                TitleColumn,
		AssigneeID:           AssigneeIDColumn,
		DueIn:                DueInColumn,
		EndType:              EndTypeColumn,
		SubWorkflowVersionID: SubWorkflowVersionIDColumn,
		Type:                 TypeColumn,
		ParentID:             ParentIDColumn,
		WorkflowVersionID:    WorkflowVersionIDColumn,
		FormTemplateID:       FormTemplateIDColumn,
		FormDataID:           FormDataIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
