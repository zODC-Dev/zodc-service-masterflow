//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FormData = newFormDataTable("public", "form_data", "")

type formDataTable struct {
	postgres.Table

	// Columns
	ID                    postgres.ColumnString
	CreatedAt             postgres.ColumnTimestamp
	UpdatedAt             postgres.ColumnTimestamp
	DeletedAt             postgres.ColumnTimestamp
	FormTemplateVersionID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FormDataTable struct {
	formDataTable

	EXCLUDED formDataTable
}

// AS creates new FormDataTable with assigned alias
func (a FormDataTable) AS(alias string) *FormDataTable {
	return newFormDataTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FormDataTable with assigned schema name
func (a FormDataTable) FromSchema(schemaName string) *FormDataTable {
	return newFormDataTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FormDataTable with assigned table prefix
func (a FormDataTable) WithPrefix(prefix string) *FormDataTable {
	return newFormDataTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FormDataTable with assigned table suffix
func (a FormDataTable) WithSuffix(suffix string) *FormDataTable {
	return newFormDataTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFormDataTable(schemaName, tableName, alias string) *FormDataTable {
	return &FormDataTable{
		formDataTable: newFormDataTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newFormDataTableImpl("", "excluded", ""),
	}
}

func newFormDataTableImpl(schemaName, tableName, alias string) formDataTable {
	var (
		IDColumn                    = postgres.StringColumn("id")
		CreatedAtColumn             = postgres.TimestampColumn("created_at")
		UpdatedAtColumn             = postgres.TimestampColumn("updated_at")
		DeletedAtColumn             = postgres.TimestampColumn("deleted_at")
		FormTemplateVersionIDColumn = postgres.IntegerColumn("form_template_version_id")
		allColumns                  = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, FormTemplateVersionIDColumn}
		mutableColumns              = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, FormTemplateVersionIDColumn}
	)

	return formDataTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                    IDColumn,
		CreatedAt:             CreatedAtColumn,
		UpdatedAt:             UpdatedAtColumn,
		DeletedAt:             DeletedAtColumn,
		FormTemplateVersionID: FormTemplateVersionIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
