//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Nodes = newNodesTable("public", "nodes", "")

type nodesTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnString
	CreatedAt  postgres.ColumnTimestamp
	UpdatedAt  postgres.ColumnTimestamp
	DeletedAt  postgres.ColumnTimestamp
	X          postgres.ColumnInteger
	Y          postgres.ColumnInteger
	Type       postgres.ColumnString
	ParentID   postgres.ColumnString
	AssginerID postgres.ColumnInteger
	Title      postgres.ColumnString
	Data       postgres.ColumnString
	WorkflowID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type NodesTable struct {
	nodesTable

	EXCLUDED nodesTable
}

// AS creates new NodesTable with assigned alias
func (a NodesTable) AS(alias string) *NodesTable {
	return newNodesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NodesTable with assigned schema name
func (a NodesTable) FromSchema(schemaName string) *NodesTable {
	return newNodesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NodesTable with assigned table prefix
func (a NodesTable) WithPrefix(prefix string) *NodesTable {
	return newNodesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NodesTable with assigned table suffix
func (a NodesTable) WithSuffix(suffix string) *NodesTable {
	return newNodesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNodesTable(schemaName, tableName, alias string) *NodesTable {
	return &NodesTable{
		nodesTable: newNodesTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newNodesTableImpl("", "excluded", ""),
	}
}

func newNodesTableImpl(schemaName, tableName, alias string) nodesTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		CreatedAtColumn  = postgres.TimestampColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampColumn("updated_at")
		DeletedAtColumn  = postgres.TimestampColumn("deleted_at")
		XColumn          = postgres.IntegerColumn("x")
		YColumn          = postgres.IntegerColumn("y")
		TypeColumn       = postgres.StringColumn("type")
		ParentIDColumn   = postgres.StringColumn("parent_id")
		AssginerIDColumn = postgres.IntegerColumn("assginer_id")
		TitleColumn      = postgres.StringColumn("title")
		DataColumn       = postgres.StringColumn("data")
		WorkflowIDColumn = postgres.IntegerColumn("workflow_id")
		allColumns       = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, XColumn, YColumn, TypeColumn, ParentIDColumn, AssginerIDColumn, TitleColumn, DataColumn, WorkflowIDColumn}
		mutableColumns   = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, XColumn, YColumn, TypeColumn, ParentIDColumn, AssginerIDColumn, TitleColumn, DataColumn, WorkflowIDColumn}
	)

	return nodesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,
		DeletedAt:  DeletedAtColumn,
		X:          XColumn,
		Y:          YColumn,
		Type:       TypeColumn,
		ParentID:   ParentIDColumn,
		AssginerID: AssginerIDColumn,
		Title:      TitleColumn,
		Data:       DataColumn,
		WorkflowID: WorkflowIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
