//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Connections = newConnectionsTable("public", "connections", "")

type connectionsTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	CreatedAt   postgres.ColumnTimestamp
	UpdatedAt   postgres.ColumnTimestamp
	DeletedAt   postgres.ColumnTimestamp
	FromNodeID  postgres.ColumnString
	ToNodeID    postgres.ColumnString
	Text        postgres.ColumnString
	IsCompleted postgres.ColumnBool
	RequestID   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ConnectionsTable struct {
	connectionsTable

	EXCLUDED connectionsTable
}

// AS creates new ConnectionsTable with assigned alias
func (a ConnectionsTable) AS(alias string) *ConnectionsTable {
	return newConnectionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ConnectionsTable with assigned schema name
func (a ConnectionsTable) FromSchema(schemaName string) *ConnectionsTable {
	return newConnectionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ConnectionsTable with assigned table prefix
func (a ConnectionsTable) WithPrefix(prefix string) *ConnectionsTable {
	return newConnectionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ConnectionsTable with assigned table suffix
func (a ConnectionsTable) WithSuffix(suffix string) *ConnectionsTable {
	return newConnectionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newConnectionsTable(schemaName, tableName, alias string) *ConnectionsTable {
	return &ConnectionsTable{
		connectionsTable: newConnectionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newConnectionsTableImpl("", "excluded", ""),
	}
}

func newConnectionsTableImpl(schemaName, tableName, alias string) connectionsTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		CreatedAtColumn   = postgres.TimestampColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampColumn("updated_at")
		DeletedAtColumn   = postgres.TimestampColumn("deleted_at")
		FromNodeIDColumn  = postgres.StringColumn("from_node_id")
		ToNodeIDColumn    = postgres.StringColumn("to_node_id")
		TextColumn        = postgres.StringColumn("text")
		IsCompletedColumn = postgres.BoolColumn("is_completed")
		RequestIDColumn   = postgres.IntegerColumn("request_id")
		allColumns        = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, FromNodeIDColumn, ToNodeIDColumn, TextColumn, IsCompletedColumn, RequestIDColumn}
		mutableColumns    = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, FromNodeIDColumn, ToNodeIDColumn, TextColumn, IsCompletedColumn, RequestIDColumn}
	)

	return connectionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		DeletedAt:   DeletedAtColumn,
		FromNodeID:  FromNodeIDColumn,
		ToNodeID:    ToNodeIDColumn,
		Text:        TextColumn,
		IsCompleted: IsCompletedColumn,
		RequestID:   RequestIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
