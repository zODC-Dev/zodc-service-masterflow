//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var NodeConditionDestinations = newNodeConditionDestinationsTable("public", "node_condition_destinations", "")

type nodeConditionDestinationsTable struct {
	postgres.Table

	// Columns
	ID                postgres.ColumnInteger
	CreatedAt         postgres.ColumnTimestamp
	UpdatedAt         postgres.ColumnTimestamp
	DeletedAt         postgres.ColumnTimestamp
	DestinationNodeID postgres.ColumnString
	IsTrue            postgres.ColumnBool
	NodeID            postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type NodeConditionDestinationsTable struct {
	nodeConditionDestinationsTable

	EXCLUDED nodeConditionDestinationsTable
}

// AS creates new NodeConditionDestinationsTable with assigned alias
func (a NodeConditionDestinationsTable) AS(alias string) *NodeConditionDestinationsTable {
	return newNodeConditionDestinationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NodeConditionDestinationsTable with assigned schema name
func (a NodeConditionDestinationsTable) FromSchema(schemaName string) *NodeConditionDestinationsTable {
	return newNodeConditionDestinationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NodeConditionDestinationsTable with assigned table prefix
func (a NodeConditionDestinationsTable) WithPrefix(prefix string) *NodeConditionDestinationsTable {
	return newNodeConditionDestinationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NodeConditionDestinationsTable with assigned table suffix
func (a NodeConditionDestinationsTable) WithSuffix(suffix string) *NodeConditionDestinationsTable {
	return newNodeConditionDestinationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNodeConditionDestinationsTable(schemaName, tableName, alias string) *NodeConditionDestinationsTable {
	return &NodeConditionDestinationsTable{
		nodeConditionDestinationsTable: newNodeConditionDestinationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                       newNodeConditionDestinationsTableImpl("", "excluded", ""),
	}
}

func newNodeConditionDestinationsTableImpl(schemaName, tableName, alias string) nodeConditionDestinationsTable {
	var (
		IDColumn                = postgres.IntegerColumn("id")
		CreatedAtColumn         = postgres.TimestampColumn("created_at")
		UpdatedAtColumn         = postgres.TimestampColumn("updated_at")
		DeletedAtColumn         = postgres.TimestampColumn("deleted_at")
		DestinationNodeIDColumn = postgres.StringColumn("destination_node_id")
		IsTrueColumn            = postgres.BoolColumn("is_true")
		NodeIDColumn            = postgres.StringColumn("node_id")
		allColumns              = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, DestinationNodeIDColumn, IsTrueColumn, NodeIDColumn}
		mutableColumns          = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, DestinationNodeIDColumn, IsTrueColumn, NodeIDColumn}
	)

	return nodeConditionDestinationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		CreatedAt:         CreatedAtColumn,
		UpdatedAt:         UpdatedAtColumn,
		DeletedAt:         DeletedAtColumn,
		DestinationNodeID: DestinationNodeIDColumn,
		IsTrue:            IsTrueColumn,
		NodeID:            NodeIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
