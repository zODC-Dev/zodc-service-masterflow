//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var FormTemplateVersions = newFormTemplateVersionsTable("public", "form_template_versions", "")

type formTemplateVersionsTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnInteger
	CreatedAt      postgres.ColumnTimestamp
	UpdatedAt      postgres.ColumnTimestamp
	DeletedAt      postgres.ColumnTimestamp
	Version        postgres.ColumnInteger
	IsArchived     postgres.ColumnBool
	Status         postgres.ColumnString
	FormTemplateID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type FormTemplateVersionsTable struct {
	formTemplateVersionsTable

	EXCLUDED formTemplateVersionsTable
}

// AS creates new FormTemplateVersionsTable with assigned alias
func (a FormTemplateVersionsTable) AS(alias string) *FormTemplateVersionsTable {
	return newFormTemplateVersionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FormTemplateVersionsTable with assigned schema name
func (a FormTemplateVersionsTable) FromSchema(schemaName string) *FormTemplateVersionsTable {
	return newFormTemplateVersionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FormTemplateVersionsTable with assigned table prefix
func (a FormTemplateVersionsTable) WithPrefix(prefix string) *FormTemplateVersionsTable {
	return newFormTemplateVersionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FormTemplateVersionsTable with assigned table suffix
func (a FormTemplateVersionsTable) WithSuffix(suffix string) *FormTemplateVersionsTable {
	return newFormTemplateVersionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFormTemplateVersionsTable(schemaName, tableName, alias string) *FormTemplateVersionsTable {
	return &FormTemplateVersionsTable{
		formTemplateVersionsTable: newFormTemplateVersionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                  newFormTemplateVersionsTableImpl("", "excluded", ""),
	}
}

func newFormTemplateVersionsTableImpl(schemaName, tableName, alias string) formTemplateVersionsTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		CreatedAtColumn      = postgres.TimestampColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampColumn("updated_at")
		DeletedAtColumn      = postgres.TimestampColumn("deleted_at")
		VersionColumn        = postgres.IntegerColumn("version")
		IsArchivedColumn     = postgres.BoolColumn("is_archived")
		StatusColumn         = postgres.StringColumn("status")
		FormTemplateIDColumn = postgres.IntegerColumn("form_template_id")
		allColumns           = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, VersionColumn, IsArchivedColumn, StatusColumn, FormTemplateIDColumn}
		mutableColumns       = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, VersionColumn, IsArchivedColumn, StatusColumn, FormTemplateIDColumn}
	)

	return formTemplateVersionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,
		DeletedAt:      DeletedAtColumn,
		Version:        VersionColumn,
		IsArchived:     IsArchivedColumn,
		Status:         StatusColumn,
		FormTemplateID: FormTemplateIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
