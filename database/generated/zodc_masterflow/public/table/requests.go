//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Requests = newRequestsTable("public", "requests", "")

type requestsTable struct {
	postgres.Table

	// Columns
	ID                postgres.ColumnInteger
	CreatedAt         postgres.ColumnTimestamp
	UpdatedAt         postgres.ColumnTimestamp
	DeletedAt         postgres.ColumnTimestamp
	UserID            postgres.ColumnInteger
	Key               postgres.ColumnInteger
	LastUpdateUserID  postgres.ColumnInteger
	Status            postgres.ColumnString
	Title             postgres.ColumnString
	IsTemplate        postgres.ColumnBool
	SprintID          postgres.ColumnInteger
	ParentID          postgres.ColumnInteger
	Progress          postgres.ColumnFloat
	StartedAt         postgres.ColumnTimestamp
	CompletedAt       postgres.ColumnTimestamp
	CanceledAt        postgres.ColumnTimestamp
	TerminatedAt      postgres.ColumnTimestamp
	WorkflowVersionID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RequestsTable struct {
	requestsTable

	EXCLUDED requestsTable
}

// AS creates new RequestsTable with assigned alias
func (a RequestsTable) AS(alias string) *RequestsTable {
	return newRequestsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RequestsTable with assigned schema name
func (a RequestsTable) FromSchema(schemaName string) *RequestsTable {
	return newRequestsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RequestsTable with assigned table prefix
func (a RequestsTable) WithPrefix(prefix string) *RequestsTable {
	return newRequestsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RequestsTable with assigned table suffix
func (a RequestsTable) WithSuffix(suffix string) *RequestsTable {
	return newRequestsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRequestsTable(schemaName, tableName, alias string) *RequestsTable {
	return &RequestsTable{
		requestsTable: newRequestsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newRequestsTableImpl("", "excluded", ""),
	}
}

func newRequestsTableImpl(schemaName, tableName, alias string) requestsTable {
	var (
		IDColumn                = postgres.IntegerColumn("id")
		CreatedAtColumn         = postgres.TimestampColumn("created_at")
		UpdatedAtColumn         = postgres.TimestampColumn("updated_at")
		DeletedAtColumn         = postgres.TimestampColumn("deleted_at")
		UserIDColumn            = postgres.IntegerColumn("user_id")
		KeyColumn               = postgres.IntegerColumn("key")
		LastUpdateUserIDColumn  = postgres.IntegerColumn("last_update_user_id")
		StatusColumn            = postgres.StringColumn("status")
		TitleColumn             = postgres.StringColumn("title")
		IsTemplateColumn        = postgres.BoolColumn("is_template")
		SprintIDColumn          = postgres.IntegerColumn("sprint_id")
		ParentIDColumn          = postgres.IntegerColumn("parent_id")
		ProgressColumn          = postgres.FloatColumn("progress")
		StartedAtColumn         = postgres.TimestampColumn("started_at")
		CompletedAtColumn       = postgres.TimestampColumn("completed_at")
		CanceledAtColumn        = postgres.TimestampColumn("canceled_at")
		TerminatedAtColumn      = postgres.TimestampColumn("terminated_at")
		WorkflowVersionIDColumn = postgres.IntegerColumn("workflow_version_id")
		allColumns              = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, UserIDColumn, KeyColumn, LastUpdateUserIDColumn, StatusColumn, TitleColumn, IsTemplateColumn, SprintIDColumn, ParentIDColumn, ProgressColumn, StartedAtColumn, CompletedAtColumn, CanceledAtColumn, TerminatedAtColumn, WorkflowVersionIDColumn}
		mutableColumns          = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, UserIDColumn, KeyColumn, LastUpdateUserIDColumn, StatusColumn, TitleColumn, IsTemplateColumn, SprintIDColumn, ParentIDColumn, ProgressColumn, StartedAtColumn, CompletedAtColumn, CanceledAtColumn, TerminatedAtColumn, WorkflowVersionIDColumn}
	)

	return requestsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		CreatedAt:         CreatedAtColumn,
		UpdatedAt:         UpdatedAtColumn,
		DeletedAt:         DeletedAtColumn,
		UserID:            UserIDColumn,
		Key:               KeyColumn,
		LastUpdateUserID:  LastUpdateUserIDColumn,
		Status:            StatusColumn,
		Title:             TitleColumn,
		IsTemplate:        IsTemplateColumn,
		SprintID:          SprintIDColumn,
		ParentID:          ParentIDColumn,
		Progress:          ProgressColumn,
		StartedAt:         StartedAtColumn,
		CompletedAt:       CompletedAtColumn,
		CanceledAt:        CanceledAtColumn,
		TerminatedAt:      TerminatedAtColumn,
		WorkflowVersionID: WorkflowVersionIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
