// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/categories": {
            "get": {
                "description": "Trả về danh sách tất cả các category có trong hệ thống.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Categories"
                ],
                "summary": "Lấy danh sách tất cả Category",
                "responses": {
                    "200": {
                        "description": "Danh sách Category",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.CategoryFindAll"
                            }
                        }
                    },
                    "500": {
                        "description": "Lỗi Server Nội Bộ",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/forms/templates": {
            "get": {
                "description": "Retrieves a list of form templates, optionally filtered by category ID and search query.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forms"
                ],
                "summary": "Find all form templates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by category ID",
                        "name": "categoryId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search query for form template names or descriptions",
                        "name": "search",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.FormTemplateFindAll"
                            }
                        }
                    },
                    "500": {
                        "description": "Error message for internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new form template to the system based on the provided data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forms"
                ],
                "summary": "Create a new form template",
                "parameters": [
                    {
                        "description": "Form Template Creation Request",
                        "name": "formTemplate",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.FormTemplateCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "message: Form created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Error message for bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error message for internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/forms/templates/{formTemplateId}/fields": {
            "get": {
                "description": "Retrieves all fields associated with a given form template ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forms"
                ],
                "summary": "Find all fields for a specific form template",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Form Template ID",
                        "name": "formTemplateId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.FormTemplateFieldsFindAll"
                            }
                        }
                    },
                    "400": {
                        "description": "Error message for invalid form template ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error message for internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/nodes/{id}/complete": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Marks a specific node as completed by the logged-in user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "Complete a node",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Node completed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "error: Error message for bad request (e.g., missing ID, invalid ID, service error)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/nodes/{id}/form/{permission}": {
            "get": {
                "description": "Retrieves the form associated with a node, considering the user's permission level.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "Get node form based on permission",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Permission level (e.g., 'read', 'write')",
                        "name": "permission",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.NodeFormResponse"
                        }
                    },
                    "400": {
                        "description": "error: Error message for bad request (e.g., missing params, service error)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/nodes/{id}/jira-form": {
            "get": {
                "description": "Retrieves the Jira-specific form details associated with a node.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "Get Jira form for a node",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.JiraFormDetailResponse"
                        }
                    },
                    "400": {
                        "description": "error: Error message for bad request (e.g., missing ID, service error)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/nodes/{id}/start": {
            "patch": {
                "description": "Marks a specific node as started.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "Start a node",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Node started successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Error message for bad request (e.g., missing ID, service error)",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/nodes/{id}/tasks": {
            "get": {
                "description": "Retrieves detailed information about the tasks associated with a specific node.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Nodes"
                ],
                "summary": "Get task details for a node",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.TaskDetail"
                            }
                        }
                    },
                    "400": {
                        "description": "error: Error message for bad request (e.g., missing ID, service error)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/requests": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of requests based on various filter criteria for the logged-in user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Requests"
                ],
                "summary": "Find all requests",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search term for requests",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by project key",
                        "name": "projectKey",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by request status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by sprint ID",
                        "name": "sprintId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by workflow type",
                        "name": "workflowType",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/responses.RequestResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "error: Error message for bad request (e.g., service error)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/requests/count": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves counts of requests grouped by status or other criteria for the logged-in user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Requests"
                ],
                "summary": "Get request counts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.RequestOverviewResponse"
                        }
                    },
                    "500": {
                        "description": "Error message for internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/requests/tasks/by-project": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a paginated list of tasks across requests, filtered by project, type, status, and workflow type for the logged-in user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Requests"
                ],
                "summary": "Get request tasks by project and filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by project key",
                        "name": "projectKey",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by workflow type",
                        "name": "workflowType",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by task status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by task type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/responses.RequestTaskResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Error message for internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/requests/tasks/count": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves the total count of tasks matching filter criteria like project, workflow type, and task type for the logged-in user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Requests"
                ],
                "summary": "Get count of request tasks based on filters",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by project key",
                        "name": "projectKey",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter by workflow type",
                        "name": "workflowType",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by task type",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.RequestTaskCountResponse"
                        }
                    },
                    "500": {
                        "description": "Error message for internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/requests/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves detailed information for a specific request ID for the logged-in user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Requests"
                ],
                "summary": "Get request details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Request ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.RequestDetailResponse"
                        }
                    },
                    "400": {
                        "description": "Error message for invalid request ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error message for internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates details of an existing request identified by its ID. Requires user authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Requests"
                ],
                "summary": "Update a request",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Request ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request Update Data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.RequestUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message: Request updated successfully: {id}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Error message for invalid request ID or bad request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error message for internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/requests/{id}/overview": {
            "get": {
                "description": "Retrieves overview information (like counts, statuses) for a specific request ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Requests"
                ],
                "summary": "Get request overview",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Request ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.RequestOverviewResponse"
                        }
                    },
                    "400": {
                        "description": "Error message for invalid request ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error message for internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/requests/{id}/sub-requests": {
            "get": {
                "description": "Retrieves a paginated list of sub-requests associated with a specific parent request ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Requests"
                ],
                "summary": "Find all sub-requests for a given request",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Parent Request ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/responses.RequestSubRequest"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Error message for invalid request ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error message for internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/requests/{id}/tasks": {
            "get": {
                "description": "Retrieves a paginated list of tasks associated with a given request ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Requests"
                ],
                "summary": "Get tasks for a specific request",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Request ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "pageSize",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/responses.RequestTaskResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Error message for invalid request ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error message for internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/utils/excel-extract": {
            "post": {
                "description": "Uploads an Excel file and extracts data from it.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Utils"
                ],
                "summary": "Extract data from an Excel file",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Excel file to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: No file is received",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: Fail extract excel file",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/workflows": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of workflows based on various filter criteria for the logged-in user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workflows"
                ],
                "summary": "Find all workflows",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by category ID",
                        "name": "categoryId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search term for workflows",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by workflow type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by project key",
                        "name": "projectKey",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by whether it has sub-workflows",
                        "name": "hasSubWorkflow",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by archival status",
                        "name": "isArchived",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/responses.WorkflowResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Error message for internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Adds a new workflow definition based on the provided data. Requires user authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workflows"
                ],
                "summary": "Create a new workflow",
                "parameters": [
                    {
                        "description": "Workflow Creation Request",
                        "name": "workflow",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateWorkflow"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "message: Workflow created successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Error message for bad request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error message for internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/workflows/start": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Initiates a new instance of a workflow based on the provided request details. Requires user authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workflows"
                ],
                "summary": "Start a workflow instance",
                "parameters": [
                    {
                        "description": "Start Workflow Request",
                        "name": "startRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.StartWorkflow"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/responses.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Error message for bad request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error message for internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/workflows/{id}": {
            "get": {
                "description": "Retrieves detailed information for a specific workflow version ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workflows"
                ],
                "summary": "Find workflow detail by version ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Workflow Version ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.WorkflowDetailResponse"
                        }
                    },
                    "500": {
                        "description": "Error message for invalid ID or internal server error\" // Combined 400/500 based on current code",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/workflows/{id}/archive": {
            "patch": {
                "description": "Marks a workflow definition as archived based on its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workflows"
                ],
                "summary": "Archive a workflow",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Workflow ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: Workflow archived successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Error message for invalid ID or internal server error\" // Combined 400/500 based on current code",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "requests.Connection": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            }
        },
        "requests.CreateWorkflow": {
            "type": "object",
            "properties": {
                "categoryId": {
                    "type": "integer"
                },
                "connections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/requests.Connection"
                    }
                },
                "decoration": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "nodes": {
                    "description": "ko chứa story",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/requests.Node"
                    }
                },
                "projectKey": {
                    "type": "string"
                },
                "sprintId": {
                    "type": "integer"
                },
                "stories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/requests.Story"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "requests.FormTemplateCreate": {
            "type": "object"
        },
        "requests.Node": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/requests.NodeData"
                },
                "estimatePoint": {
                    "type": "integer"
                },
                "form": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/requests.NodeForm"
                    }
                },
                "id": {
                    "type": "string"
                },
                "jiraKey": {
                    "type": "string"
                },
                "parentId": {
                    "type": "string"
                },
                "position": {
                    "$ref": "#/definitions/types.Position"
                },
                "size": {
                    "$ref": "#/definitions/types.Size"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "requests.NodeData": {
            "type": "object",
            "properties": {
                "assignee": {
                    "$ref": "#/definitions/requests.NodeDataAssignee"
                },
                "condition": {
                    "$ref": "#/definitions/requests.NodeDataCondition"
                },
                "dueIn": {
                    "type": "integer"
                },
                "endType": {
                    "type": "string"
                },
                "formAttached": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/requests.NodeDataFormAttached"
                    }
                },
                "jiraKey": {
                    "type": "string"
                },
                "subRequestID": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "requests.NodeDataAssignee": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "requests.NodeDataCondition": {
            "type": "object",
            "properties": {
                "falseDestinations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "trueDestinations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "requests.NodeDataFormAttached": {
            "type": "object",
            "properties": {
                "approveUserIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "dataId": {
                    "type": "string"
                },
                "formTemplateId": {
                    "type": "integer"
                },
                "fromFormAttachedPosition": {
                    "type": "integer"
                },
                "fromUserId": {
                    "type": "integer"
                },
                "isOriginal": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "optionId": {
                    "type": "string"
                },
                "permission": {
                    "type": "string"
                }
            }
        },
        "requests.NodeForm": {
            "type": "object",
            "properties": {
                "fieldId": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "requests.RequestUpdateRequest": {
            "type": "object",
            "properties": {
                "connections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/requests.Connection"
                    }
                },
                "nodes": {
                    "description": "ko chứa story",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/requests.Node"
                    }
                },
                "stories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/requests.Story"
                    }
                }
            }
        },
        "requests.StartWorkflow": {
            "type": "object",
            "properties": {
                "connections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/requests.Connection"
                    }
                },
                "isTemplate": {
                    "type": "boolean"
                },
                "nodes": {
                    "description": "ko chứa story",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/requests.Node"
                    }
                },
                "requestID": {
                    "type": "integer"
                },
                "sprintID": {
                    "type": "integer"
                },
                "stories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/requests.Story"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "requests.Story": {
            "type": "object",
            "properties": {
                "categoryId": {
                    "type": "integer"
                },
                "categoryKey": {
                    "type": "string"
                },
                "decoration": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "node": {
                    "$ref": "#/definitions/requests.Node"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "responses.CategoryFindAll": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "isActive": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "responses.CategoryResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "responses.ConnectionResponse": {
            "type": "object",
            "properties": {
                "from": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isCompleted": {
                    "type": "boolean"
                },
                "text": {
                    "type": "string"
                },
                "to": {
                    "type": "string"
                }
            }
        },
        "responses.CurrentTaskResponse": {
            "type": "object",
            "properties": {
                "participants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Assignee"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "responses.FormTemplateFieldsFindAll": {
            "type": "object",
            "properties": {
                "advancedOptions": {
                    "type": "object",
                    "additionalProperties": true
                },
                "category": {
                    "type": "string"
                },
                "colNum": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "fieldId": {
                    "type": "string"
                },
                "fieldName": {
                    "type": "string"
                },
                "fieldType": {
                    "type": "string"
                },
                "formId": {
                    "type": "integer"
                },
                "icon": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "required": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "responses.FormTemplateFindAll": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/responses.CategoryFindAll"
                },
                "createdAt": {
                    "type": "string"
                },
                "dataSheet": {
                    "type": "object",
                    "additionalProperties": true
                },
                "decoration": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "fileName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "templateId": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "responses.JiraFormDetailResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.NodeFormDataResponse"
                    }
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.FormTemplateFieldsFindAll"
                    }
                },
                "template": {
                    "$ref": "#/definitions/responses.FormTemplateFindAll"
                }
            }
        },
        "responses.NodeDataResponse": {
            "type": "object",
            "properties": {
                "assignee": {
                    "$ref": "#/definitions/types.Assignee"
                },
                "endType": {
                    "type": "string"
                },
                "estimatePoint": {
                    "type": "integer"
                },
                "formAttached": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.NodeFormResponse"
                    }
                },
                "subRequestId": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "responses.NodeFormDataResponse": {
            "type": "object",
            "properties": {
                "fieldId": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "responses.NodeFormResponse": {
            "type": "object",
            "properties": {
                "approveUserIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "dataId": {
                    "type": "string"
                },
                "formTemplateId": {
                    "type": "integer"
                },
                "fromFormAttachedPosition": {
                    "type": "integer"
                },
                "fromUserId": {
                    "type": "integer"
                },
                "isOriginal": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "optionKey": {
                    "type": "string"
                },
                "permission": {
                    "type": "string"
                }
            }
        },
        "responses.NodeResponse": {
            "type": "object",
            "properties": {
                "completedAt": {
                    "type": "string"
                },
                "data": {
                    "$ref": "#/definitions/responses.NodeDataResponse"
                },
                "form": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.NodeFormDataResponse"
                    }
                },
                "id": {
                    "type": "string"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "jiraKey": {
                    "type": "string"
                },
                "parentId": {
                    "type": "string"
                },
                "position": {
                    "$ref": "#/definitions/types.Position"
                },
                "size": {
                    "$ref": "#/definitions/types.Size"
                },
                "startedAt": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "responses.RequestDetailResponse": {
            "type": "object",
            "properties": {
                "canceledAt": {
                    "type": "string"
                },
                "childRequests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.RequestResponse"
                    }
                },
                "completedAt": {
                    "type": "string"
                },
                "currentTasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.CurrentTaskResponse"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "key": {
                    "type": "integer"
                },
                "parentKey": {
                    "type": "integer"
                },
                "parentRequest": {
                    "$ref": "#/definitions/responses.RequestResponse"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Assignee"
                    }
                },
                "progress": {
                    "type": "integer"
                },
                "requestedBy": {
                    "$ref": "#/definitions/types.Assignee"
                },
                "sprintId": {
                    "type": "integer"
                },
                "startedAt": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "terminatedAt": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "workflow": {
                    "$ref": "#/definitions/responses.WorkflowResponse"
                }
            }
        },
        "responses.RequestOverviewResponse": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/responses.CategoryResponse"
                },
                "connections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.ConnectionResponse"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "currentVersion": {
                    "type": "integer"
                },
                "decoration": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "isArchived": {
                    "type": "boolean"
                },
                "lastAssignee": {
                    "$ref": "#/definitions/types.Assignee"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.NodeResponse"
                    }
                },
                "progress": {
                    "type": "number"
                },
                "projectKey": {
                    "type": "string"
                },
                "requestId": {
                    "type": "integer"
                },
                "stories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.StoryResponse"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "responses.RequestResponse": {
            "type": "object",
            "properties": {
                "canceledAt": {
                    "type": "string"
                },
                "completedAt": {
                    "type": "string"
                },
                "currentTasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.CurrentTaskResponse"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "key": {
                    "type": "integer"
                },
                "parentKey": {
                    "type": "integer"
                },
                "progress": {
                    "type": "integer"
                },
                "sprintId": {
                    "type": "integer"
                },
                "startedAt": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "terminatedAt": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "responses.RequestSubRequest": {
            "type": "object",
            "properties": {
                "assignee": {
                    "$ref": "#/definitions/types.Assignee"
                },
                "canceledAt": {
                    "type": "string"
                },
                "completedAt": {
                    "type": "string"
                },
                "key": {
                    "type": "integer"
                },
                "startedAt": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "taskTitle": {
                    "type": "string"
                },
                "terminatedAt": {
                    "type": "string"
                },
                "workflowTitle": {
                    "type": "string"
                }
            }
        },
        "responses.RequestTaskCountResponse": {
            "type": "object",
            "properties": {
                "completedCount": {
                    "type": "integer"
                },
                "overdueCount": {
                    "type": "integer"
                },
                "todoCount": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                }
            }
        },
        "responses.RequestTaskResponse": {
            "type": "object",
            "properties": {
                "actualEndTime": {
                    "type": "string"
                },
                "actualStartTime": {
                    "type": "string"
                },
                "assignee": {
                    "$ref": "#/definitions/types.Assignee"
                },
                "estimatePoint": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "plannedEndTime": {
                    "type": "string"
                },
                "plannedStartTime": {
                    "type": "string"
                },
                "requestId": {
                    "type": "integer"
                },
                "requestProgress": {
                    "type": "number"
                },
                "requestTitle": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "responses.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "responses.StoryResponse": {
            "type": "object",
            "properties": {
                "categoryKey": {
                    "type": "string"
                },
                "decoration": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "node": {
                    "$ref": "#/definitions/responses.NodeResponse"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "responses.TaskDetail": {
            "type": "object",
            "properties": {
                "actualEndTime": {
                    "type": "string"
                },
                "actualStartTime": {
                    "type": "string"
                },
                "assignee": {
                    "$ref": "#/definitions/types.Assignee"
                },
                "estimatePoint": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "isApproval": {
                    "type": "boolean"
                },
                "isCurrent": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "plannedEndTime": {
                    "type": "string"
                },
                "plannedStartTime": {
                    "type": "string"
                },
                "requestId": {
                    "type": "integer"
                },
                "requestProgress": {
                    "type": "number"
                },
                "requestRequestBy": {
                    "$ref": "#/definitions/types.Assignee"
                },
                "requestTitle": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "responses.WorkflowDetailResponse": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/responses.CategoryResponse"
                },
                "connections": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.ConnectionResponse"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "currentVersion": {
                    "type": "integer"
                },
                "decoration": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "isArchived": {
                    "type": "boolean"
                },
                "lastAssignee": {
                    "$ref": "#/definitions/types.Assignee"
                },
                "nodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.NodeResponse"
                    }
                },
                "projectKey": {
                    "type": "string"
                },
                "requestId": {
                    "type": "integer"
                },
                "stories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responses.StoryResponse"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "responses.WorkflowResponse": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/responses.CategoryResponse"
                },
                "createdAt": {
                    "type": "string"
                },
                "currentVersion": {
                    "type": "integer"
                },
                "decoration": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "isArchived": {
                    "type": "boolean"
                },
                "projectKey": {
                    "type": "string"
                },
                "requestId": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "types.Assignee": {
            "type": "object",
            "properties": {
                "avatarUrl": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "isSystemUser": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "types.Position": {
            "type": "object",
            "properties": {
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                }
            }
        },
        "types.Size": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "number"
                },
                "width": {
                    "type": "number"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1  // Adjusted BasePath for clarity (e.g., /api/v1) - Ensure routes match this prefix",
	Schemes:          []string{},
	Title:            "zODC Masterflow Service API",
	Description:      "This is the API documentation for the zODC Masterflow Service. It provides endpoints for managing workflows, requests, forms, and nodes.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
